# This file will configure the Helm release for Supabase.
# It will reference the GitRepository defined in supabase-community-gitsource.yaml
# and specify the chart version and values for the Supabase deployment.
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: supabase
  namespace: supabase # Deploys Supabase into its own namespace
spec:
  interval: 5m
  chart:
    spec:
      chart: ./charts/supabase # Path to the chart within the GitRepository
      version: "0.5.14" # Specify a stable chart version, update as needed
      sourceRef:
        kind: GitRepository # Changed from HelmRepository
        name: supabase-community-repo # Name of the GitRepository resource
        namespace: flux-system # Namespace of the GitRepository resource
      reconcileStrategy: ChartVersion # Or Revision if you want to track git commits
  values:
    supabasePublicURL: "https://supabase-api.stillon.top"

    # Global labels using the chart's expected structure
    supabase:
      labels:
        app.kubernetes.io/instance: supabase
        app.kubernetes.io/managed-by: flux
        app.kubernetes.io/part-of: supabase
        # app.kubernetes.io/version will be set by the chart or can be added here

    # PostgreSQL (db)
    db:
      enabled: true
      persistence:
        enabled: true
        annotations: # PVC Protection
          "kubernetes.io/pvc-protection": "true"
        # storageClass: "your-storage-class"
        # size: 10Gi
      environment:
        POSTGRES_USER: "postgres"
        POSTGRES_DB: "postgres"
        POSTGRES_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: POSTGRES_PASSWORD

    # Supabase Studio
    studio:
      environment:
        STUDIO_DEFAULT_ORGANIZATION: "Stillon Org"
        STUDIO_DEFAULT_PROJECT: "Main Project"
        SUPABASE_PUBLIC_URL: "https://supabase-api.stillon.top"
        NEXT_PUBLIC_ENABLE_LOGS: "true"
        SUPABASE_URL: "https://supabase-api.stillon.top"
        SUPABASE_ANON_KEY:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: ANON_KEY
        SUPABASE_SERVICE_KEY:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: SERVICE_KEY
      config: # For dashboard password
        LOGIN_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: DASHBOARD_PASSWORD
      ingress:
        enabled: true
        className: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/proxy-body-size: "500m"
        hosts:
          - host: supabase-studio.stillon.top
            paths:
              - path: /
                pathType: ImplementationSpecific
        tls:
          - secretName: supabase-studio-tls
            hosts:
              - supabase-studio.stillon.top

    # Supabase Auth
    auth:
      environment:
        API_EXTERNAL_URL: "https://supabase-api.stillon.top"
        GOTRUE_SITE_URL: "https://supabase-api.stillon.top" # Review if this should be studio or api URL
        GOTRUE_EXTERNAL_EMAIL_ENABLED: "false"
        GOTRUE_MAILER_AUTOCONFIRM: "true"
        GOTRUE_JWT_SECRET:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: JWT_SECRET
        GOTRUE_ANON_KEY:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: ANON_KEY
        GOTRUE_SERVICE_KEY:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: SERVICE_KEY

    # Supabase REST (PostgREST)
    rest:
      environment:
        # PGRST_DB_URI is typically constructed by the chart using user, pass, host etc.
        # We provide the password, anon role, and JWT secret.
        PGRST_DB_ANON_ROLE: "anon" # Default, ensure this role exists
        PGRST_JWT_SECRET:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: JWT_SECRET
        # The chart should use these to construct the DB URI:
        PGRST_DB_USER: "postgres"
        PGRST_DB_PORT: "5432"
        PGRST_DB_HOST: "supabase-db" # Default service name for DB
        PGRST_DB_NAME: "postgres"
        PGRST_DB_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: POSTGRES_PASSWORD

    # Supabase Realtime
    realtime:
      enabled: true # Ensure realtime is enabled if you need it
      environment:
        DB_HOST: "supabase-db"
        DB_PORT: "5432"
        DB_USER: "postgres"
        DB_SSL: "false" # Assuming internal traffic
        JWT_SECRET:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: JWT_SECRET
        DB_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: POSTGRES_PASSWORD

    # Supabase Meta (for migrations, schema introspection)
    meta:
      environment:
        POSTGRES_HOST: "supabase-db"
        POSTGRES_PORT: "5432"
        POSTGRES_USER: "postgres"
        POSTGRES_DATABASE: "postgres"
        POSTGRES_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: POSTGRES_PASSWORD

    # Supabase Storage
    storage:
      persistence:
        enabled: true
        annotations: # PVC Protection
          "kubernetes.io/pvc-protection": "true"
        # storageClass: "your-storage-class"
        # size: 100Gi
      environment:
        # DATABASE_URL is typically constructed by the chart.
        # We provide password and other necessary keys.
        PG_META_URL: "http://supabase-meta:8080" # Service name for meta
        ANON_KEY:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: ANON_KEY
        SERVICE_KEY:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: SERVICE_KEY
        JWT_SECRET:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: JWT_SECRET
        # For constructing DATABASE_URL if chart needs it:
        POSTGRES_USER: "postgres"
        POSTGRES_HOST: "supabase-db"
        POSTGRES_PORT: "5432"
        POSTGRES_DATABASE: "postgres"
        POSTGRES_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: POSTGRES_PASSWORD

    # Supabase Imgproxy
    imgproxy:
      persistence: # Optional, for caching
        enabled: true
        annotations: # PVC Protection
          "kubernetes.io/pvc-protection": "true"
        # storageClass: "your-storage-class"
        # size: 10Gi
      environment:
        IMGPROXY_ENABLE_WEBP_DETECTION: "true"
        IMGPROXY_SECRET: # Can be any string, often JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: JWT_SECRET

    # Supabase Kong (API Gateway)
    kong:
      environment:
        KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml # Default, adjust if needed
        KONG_LOG_LEVEL: info
        KONG_ANON_KEY: # Used for anonymous access through Kong
          valueFrom:
            secretKeyRef:
              name: supabase-initial-config
              key: ANON_KEY
      ingress:
        enabled: true
        className: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/rewrite-target: /
          nginx.ingress.kubernetes.io/proxy-body-size: "500m"
        hosts:
          - host: supabase-api.stillon.top
            paths:
              - path: /
                pathType: ImplementationSpecific
        tls:
          - secretName: supabase-api-tls
            hosts:
              - supabase-api.stillon.top

    # The `secret` block from the original chart values is not used here,
    # as we are injecting secrets directly into component environments.

    # PostRenderers are not used for labels or PVC finalizers,
    # as these are handled by `supabase.labels` and `*.persistence.annotations` respectively.
    # If other specific patches are needed, postRenderers can be added back.

