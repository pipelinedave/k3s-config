apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app.kubernetes.io/name: choremane
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: choremane
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: choremane
        app.kubernetes.io/component: database
    spec:
      containers:
        - name: postgres
          image: postgres:14
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-db-schema
  labels:
    app.kubernetes.io/name: choremane
    app.kubernetes.io/component: database-init
spec:
  template:
    spec:
      containers:
        - name: init-db
          image: postgres:14
          command:
            - /bin/sh
            - -c
            - |
              until pg_isready -h postgres-service -p 5432; do
                echo "Waiting for PostgreSQL to be ready...";
                sleep 2;
              done;
              echo "PostgreSQL is ready. Applying schema...";
              PGPASSWORD="$POSTGRES_PASSWORD" psql -h postgres-service -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f /docker-entrypoint-initdb.d/db.schema
          envFrom:
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: schema-volume
      restartPolicy: OnFailure
      volumes:
        - name: schema-volume
          configMap:
            name: db-schema-config
  backoffLimit: 4
